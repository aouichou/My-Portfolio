name: Fly.io + Heroku Deploy
on: [push]

jobs:
  # First job: detect which parts have changed
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend || steps.check-commit-msg.outputs.force_deploy == 'true' }}
      terminal: ${{ steps.filter.outputs.terminal || steps.check-commit-msg.outputs.force_deploy == 'true' }}
      frontend: ${{ steps.filter.outputs.frontend || steps.check-commit-msg.outputs.force_deploy == 'true' }}
      shared: ${{ steps.filter.outputs.shared }}
      force_deploy: ${{ steps.check-commit-msg.outputs.force_deploy }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Check if commit message contains force deploy flag
      - name: Check commit message
        id: check-commit-msg
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if echo "$COMMIT_MSG" | grep -q "\[deploy-all\]" || echo "$COMMIT_MSG" | grep -q "\[force-deploy\]"; then
            echo "force_deploy=true" >> $GITHUB_OUTPUT
            echo "Force deployment detected from commit message"
          else
            echo "force_deploy=false" >> $GITHUB_OUTPUT
          fi
      
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend:
              - 'portfolio_api/**'
              - 'docker-compose.yml'
              - 'nginx.conf'
            terminal:
              - 'portfolio-terminal/**'  
            frontend:
              - 'portfolio_ui/**'
            shared:
              - 'docker-compose.yml'
              - 'nginx.conf'

  # Backend deployment job with condition
  deploy-backend:
    needs: [check-changes]
    if: needs.check-changes.outputs.backend == 'true' || needs.check-changes.outputs.shared == 'true' || needs.check-changes.outputs.force_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Fly.io
        uses: superfly/flyctl-actions@1.3
        with:
          args: "deploy ./portfolio_api --remote-only"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          AWS_ACCESS_KEY_ID: ${{ secrets.TIGRIS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TIGRIS_SECRET_KEY }}
          AWS_STORAGE_BUCKET_NAME: "portfolio-media"
          AWS_S3_ENDPOINT_URL: "https://fly.storage.tigris.dev"
          SECRET_KEY: ${{ secrets.SECRET_KEY }}

  # Frontend deployment job with condition
  deploy-frontend:
    needs: [check-changes]
    if: needs.check-changes.outputs.frontend == 'true' || needs.check-changes.outputs.force_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy reason
        run: |
          if [[ "${{ needs.check-changes.outputs.force_deploy }}" == "true" ]]; then
            echo "ðŸš€ Deploying frontend because force deploy was requested in commit message"
          else
            echo "ðŸš€ Deploying frontend because frontend files changed"
          fi
      
      - name: Install Heroku CLI
        run: curl https://cli-assets.heroku.com/install.sh | sh
      
      # Set Heroku stack to container
      - name: Set Heroku stack to container
        run: heroku stack:set container -a portfolio-frontend
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      
      - name: Build, Push and Release a Docker container to Heroku
        uses: gonuit/heroku-docker-deploy@v1.3.3
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: "portfolio-frontend"
          email: "a.ouichou@student.42.fr" 
          dockerfile_directory: "./portfolio_ui/"

  # Terminal service deployment job
  deploy-terminal:
    needs: [check-changes]
    if: needs.check-changes.outputs.terminal == 'true' || needs.check-changes.outputs.shared == 'true' || needs.check-changes.outputs.force_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy Terminal to Fly.io
        uses: superfly/flyctl-actions@1.3
        with:
          args: "deploy ./portfolio-terminal --remote-only"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          TERMINAL_SECRET: ${{ secrets.TERMINAL_SECRET }}