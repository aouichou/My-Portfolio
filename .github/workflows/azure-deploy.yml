# .github/workflows/azure-deploy.yml
name: Azure Kubernetes Service Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-push:
    runs-on: ubuntu-latest
    outputs:
      backend-changes: ${{ steps.filter.outputs.backend }}
    
    steps:
      - uses: actions/checkout@v3
      
      # Add filter step to detect changes in backend code
      - name: Filter for backend changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend:
              - 'portfolio_api/**'

      # Setup Azure CLI
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      # Setup kubeconfig
      - name: Set AKS context
        uses: azure/aks-set-context@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          resource-group: ${{ secrets.RESOURCE_GROUP }}
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}

      # Setup Helm
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.8.1'
          
      # Add Helm repo
      - name: Add Helm repos
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
      
      # Setup Nginx Ingress
      - name: Setup Nginx Ingress
        run: |
          if helm list -n ingress-nginx | grep -q ingress-nginx; then
            helm upgrade ingress-nginx ingress-nginx/ingress-nginx \
              --namespace ingress-nginx \
              --set controller.replicaCount=2 \
              --set controller.nodeSelector."kubernetes\.io/os"=linux \
              --set defaultBackend.nodeSelector."kubernetes\.io/os"=linux
          else
            echo "Installing new ingress-nginx"
            helm install ingress-nginx ingress-nginx/ingress-nginx \
              --namespace ingress-nginx \
              --create-namespace \
              --set controller.replicaCount=2 \
              --set controller.nodeSelector."kubernetes\.io/os"=linux \
              --set defaultBackend.nodeSelector."kubernetes\.io/os"=linux
          fi

      # Login to ACR
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_NAME }}.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
          
      # Build and push images
      - name: Build and push frontend
        run: |
          docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/frontend:latest ./portfolio_ui
          docker push ${{ secrets.ACR_NAME }}.azurecr.io/frontend:latest
          
      - name: Build and push backend
        run: |
          docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/backend:latest ./portfolio_api
          docker push ${{ secrets.ACR_NAME }}.azurecr.io/backend:latest

      # Setup PostgreSQL if needed
      - name: Setup PostgreSQL in Kubernetes
        if: contains(github.event.commits[0].message, '[db-setup]')
        run: |
          # Create database credentials secret
          kubectl create secret generic database-credentials \
            --from-literal=DB_NAME=${{ secrets.DB_NAME }} \
            --from-literal=DB_USER=${{ secrets.DB_USER }} \
            --from-literal=DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            --from-literal=DB_HOST=postgres \
            --dry-run=client -o yaml | kubectl apply -f -
            
          # Create Django secrets
          kubectl create secret generic django-secrets \
            --from-literal=SECRET_KEY=${{ secrets.SECRET_KEY }} \
            --from-literal=ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Apply PVC first
          kubectl apply -f kubernetes/postgres-pvc.yaml
          
          # Apply Postgres deployment and service
          kubectl apply -f kubernetes/postgres-deployment.yaml
          kubectl apply -f kubernetes/postgres-service.yaml
          
          # Wait for PostgreSQL to be ready
          echo "Waiting for PostgreSQL to be ready..."
          kubectl rollout status deployment/postgres --timeout=120s

  deploy:
    needs: build-push
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      # Setup Azure CLI
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      # Setup kubeconfig
      - name: Set AKS context
        uses: azure/aks-set-context@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          resource-group: ${{ secrets.RESOURCE_GROUP }}
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}
      
      # Deploy application
      - name: Deploy to AKS
        run: |
          kubectl apply -f kubernetes/configmap.yaml
          kubectl apply -f kubernetes/service.yaml
          kubectl apply -f kubernetes/frontend-config.yaml
          kubectl apply -f kubernetes/frontend-deployment.yaml
          kubectl apply -f kubernetes/backend-deployment.yaml
          kubectl apply -f kubernetes/nginx-deployment.yaml
          kubectl apply -f kubernetes/ingress.yaml

      # Run migrations if needed
      - name: Run Database Migrations
        if: needs.build-push.outputs.backend-changes == 'true' || contains(github.event.commits[0].message, '[migrate]')
        run: |
          # Wait for PostgreSQL to be ready
          kubectl wait --for=condition=ready pod -l app=postgres --timeout=120s
          echo "Running database migrations..."
          # Create a temporary pod to run migrations
          kubectl apply -f - <<EOF
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: django-migrations-job
            labels:
              app: django-migrations
          spec:
            ttlSecondsAfterFinished: 100
            template:
              spec:
                containers:
                - name: django
                  image: ${{ secrets.ACR_NAME }}.azurecr.io/backend:latest
                  command: ["sh", "-c", "python manage.py makemigrations --noinput && python manage.py migrate --noinput && python manage.py createcachetable"]
                  envFrom:
                  - secretRef:
                      name: database-credentials
                  - secretRef:
                      name: django-secrets
                restartPolicy: Never
          EOF
          
          # Wait for the migrations to complete
          kubectl wait --for=condition=complete --timeout=60s job/django-migrations-job
          
          # Check logs
          POD_NAME=$(kubectl get pods -l job-name=django-migrations-job -o jsonpath="{.items[0].metadata.name}")
          kubectl logs $POD_NAME

      - name: Setup Database and Admin
        if: contains(github.event.commits[0].message, '[setup-admin]')
        run: |
          # Apply migrations
          kubectl exec deploy/backend -- python manage.py migrate
          
          # Create superuser non-interactively
          kubectl exec deploy/backend -- python -c "
          import os
          os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'portfolio_api.settings')
          import django
          django.setup()
          from django.contrib.auth.models import User
          if not User.objects.filter(username='admin').exists():
              User.objects.create_superuser('admin', 'admin@example.com', '${{ secrets.DJANGO_ADMIN_PASSWORD }}')
              print('Superuser created successfully')
          else:
              print('Superuser already exists')
          "
          
          # Create projects.json ConfigMap
          cat > projects.json << 'EOL'
          $(cat portfolio_api/projects.json)
          EOL
          kubectl create configmap projects-data --from-file=projects.json --dry-run=client -o yaml | kubectl apply -f -
          
          # Copy ConfigMap data to a Pod
          kubectl get pod -l app=backend -o name | head -n 1 | xargs -I{} kubectl cp projects.json {}:/app/
          
          # Import projects
          kubectl get pod -l app=backend -o name | head -n 1 | xargs -I{} kubectl exec {} -- python manage.py import_projects /app/projects.json