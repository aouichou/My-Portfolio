[
  {
    "title": "miniRT",
    "slug": "minirt",
    "description": "A ray tracing program written in C using the MiniLibX library. It renders basic 3D scenes by simulating how light interacts with geometric objects.",
    "readme": "<h1 align=\"center\">miniRT</h1>\n<h3 align=\"center\">42Paris School Project</h3>\n\n<p align=\"center\">\n  <img src=\"https://img.shields.io/badge/Language-C-blue.svg\" alt=\"Language\">\n  <img src=\"https://img.shields.io/badge/Technology-Raytracing-orange.svg\" alt=\"Raytracing\">\n  <img src=\"https://img.shields.io/badge/Status%20-Completed-brightgreen.svg\" alt=\"Status\">\n  <img src=\"https://img.shields.io/badge/Score-125%25-brightgreen.svg\" alt=\"Score\">\n</p>\n\n## About the Project\n\n**miniRT** is a ray tracing program written in C using the **MiniLibX** library. It renders basic 3D scenes by simulating how light interacts with geometric objects. Created for 42Paris, this project builds on your knowledge of C programming, mathematical transformations, and real-time rendering techniques.\n\n## Features\n\n- Parse and render scene descriptions from \".rt\" files  \n- Supports basic geometric shapes: Plane, Sphere, Cylinder  \n- Ambient and diffuse lighting, plus hard shadows  \n- Rotations and translations of shapes, lights, and cameras  \n- Window event handling (close by pressing ESC or clicking the red cross)\n\n## Technical Details\n\n- **Language**: C  \n- **Libraries**: MiniLibX, libft, math library (compile with -lm)  \n- **Raytracing**: Compute intersections, apply transformations, manage shadows, etc.",
    "tech_stack": ["C", "MiniLibX", "Raytracing", "Mathematics", "Computer Graphics"],
    "live_url": "",
    "code_url": "https://github.com/aouichou/miniRT",
    "is_featured": true,
    "score": 125,
    "features": [
      "Parse and render scene descriptions from .rt files",
      "Supports basic geometric shapes: Plane, Sphere, Cylinder",
      "Ambient and diffuse lighting, plus hard shadows",
      "Rotations and translations of shapes, lights, and cameras",
      "Window event handling"
    ],
    "challenges": "Implementing ray-tracing algorithms required deep understanding of vector mathematics and light physics. Optimizing the rendering pipeline for performance while maintaining visual quality was particularly challenging. Handling complex scene descriptions and implementing proper transformations for all supported shapes demanded careful algorithmic design.",
    "lessons": "This project significantly deepened my understanding of computer graphics fundamentals, 3D mathematics, and optimization techniques. I gained practical experience with ray-object intersections, shadow casting, and light simulation. The project also strengthened my C programming skills and taught me how to work with graphics libraries.",
    "galleries": [
      {
        "name": "Basic Scenes",
        "description": "Fundamental geometric shapes and lighting effects",
        "order": 1,
        "images": [
          {
            "image": "projects/minirt/img06.png",
            "caption": "Basic geometric shapes with ambient lighting",
            "order": 1
          },
          {
            "image": "projects/minirt/img08.png",
            "caption": "Advanced scene with multiple objects",
            "order": 2
          },
          {
            "image": "projects/minirt/img10.png",
            "caption": "Complex object interactions with shadows",
            "order": 3
          },
          {
            "image": "projects/minirt/img11.png",
            "caption": "Shadow casting demonstration",
            "order": 4
          }
        ]
      },
      {
        "name": "Advanced Effects",
        "description": "Complex lighting models and special effects",
        "order": 2,
        "images": [
          {
            "image": "projects/minirt/img12.png",
            "caption": "Complex light interactions between multiple objects",
            "order": 1
          },
          {
            "image": "projects/minirt/img14.png",
            "caption": "Environment lighting effects and reflections",
            "order": 2
          },
          {
            "image": "projects/minirt/img15.png",
            "caption": "Multiple plane and sphere interactions with realistic shadows",
            "order": 3
          },
          {
            "image": "projects/minirt/img16.png",
            "caption": "Advanced geometric structures with multiple light sources",
            "order": 4
          }
        ]
      },
      {
        "name": "Special Effects",
        "description": "Colored lights and texture mapping demonstrations",
        "order": 3,
        "images": [
          {
            "image": "projects/minirt/img17.png",
            "caption": "Scene illuminated with multiple colored light sources",
            "order": 1
          },
          {
            "image": "projects/minirt/img18.png",
            "caption": "Texture mapping applied to geometric objects",
            "order": 2
          },
          {
            "image": "projects/minirt/img19.png",
            "caption": "Advanced texture mapping with lighting effects",
            "order": 3
          }
        ]
      }
    ],
	"thumbnail": "projects/minirt/img06.png"
  },
  {
    "title": "minishell",
    "slug": "minishell",
    "description": "A custom shell implementation in C, developed as part of the 42Paris curriculum that replicates core functionalities of bash.",
    "readme": "<h1 align=\"center\">minishell</h1>\n<h3 align=\"center\">42Paris School Project</h3>\n\n<p align=\"center\">\n  <img src=\"https://img.shields.io/badge/Language-C-blue.svg\" alt=\"Language\">\n  <img src=\"https://img.shields.io/badge/Status-Completed-brightgreen.svg\" alt=\"Status\">\n  <img src=\"https://img.shields.io/badge/Score-101%25-brightgreen.svg\" alt=\"Score\">\n</p>\n\n  \n## About the Project\n\n`minishell` is a custom shell implementation in C, developed as part of the 42Paris curriculum. This project helped me appreciate the work done by the older generation of developers, gain a better understanding of how the shell works, and solidify my knowledge and skills in C and shell programming.",
    "tech_stack": ["C", "readline", "Unix System Calls", "Process Management", "File Descriptors"],
    "live_url": "",
    "code_url": "https://github.com/aouichou/minishell",
    "is_featured": true,
    "score": 101,
    "features": [
      "Command history navigation",
      "Execute commands based on the PATH variable or using relative/absolute paths",
      "Handle single and double quotes",
      "Implement redirections (<, >, <<, >>)",
      "Implement pipes (|)",
      "Handle environment variables ($) and special variables ($?)",
      "Handle signals (ctrl-C, ctrl-D, ctrl-\\)",
      "Built-in commands: echo, cd, pwd, export, unset, env, exit"
    ],
    "challenges": "Implementing a robust command parser that correctly handles quotes, redirections, and pipes was particularly challenging. Managing file descriptors during complex redirection chains required careful attention to prevent leaks. Signal handling across child processes demanded a deep understanding of process management.",
    "lessons": "This project provided invaluable insights into how shells work under the hood. I gained practical experience with process creation and management, file descriptor manipulation, and signal handling. The project also improved my debugging skills when dealing with complex, multi-process applications.",
    "galleries": [
      {
        "name": "Shell Interface",
        "description": "Visual demonstration of the minishell functionality",
        "order": 1,
        "images": [
          {
            "image": "projects/minishell/prompt.gif",
            "caption": "The minishell prompt with command history navigation",
            "order": 1
          },
          {
            "image": "projects/minishell/commands.gif",
            "caption": "Executing various commands with pipes and redirections",
            "order": 2
          }
        ]
      }
    ],
	"thumbnail": "projects/minishell/Screenshot.png"
  },
 {
	"title": "Philosophers",
	"slug": "philosophers",
	"description": "A simulation of the dining philosophers problem, demonstrating synchronization in concurrent systems. Developed as part of the 42Paris curriculum, this project explores thread/process management and resource allocation using mutexes (mandatory) and semaphores (bonus).",
	"readme": "<h1 align=\"center\">Philosophers</h1>\n<h3 align=\"center\">42Paris School Project</h3>\n\n<p align=\"center\">\n  <img src=\"https://img.shields.io/badge/Language-C-blue.svg\" alt=\"Language\">\n  <img src=\"https://img.shields.io/badge/Status-Completed-brightgreen.svg\" alt=\"Status\">\n</p>\n\n... (full README content as provided) ...",
	"tech_stack": ["C", "pthread", "sys/time", "Mutexes", "Semaphores"],
	"live_url": "",
	"code_url": "https://github.com/aouichou/philosophers",
	"is_featured": true,
	"score": null,
	"features": [
	"Thread-based philosophers with individual mutexes for forks",
	"Process-based philosophers with central fork semaphores",
	"Real-time status logging",
	"Configurable parameters",
	"Graceful cleanup on exit"
	],
	"challenges": "Implementing a robust synchronization system that prevents deadlocks while ensuring fairness. Handling the precision requirements for death detection (10ms accuracy) required careful timing implementations.",
	"lessons": "Deepened understanding of concurrent programming, resource allocation strategies, and different synchronization primitives. Gained experience in implementing both thread-based and process-based solutions.",
	"galleries": [
	{
		"name": "Simulation Examples",
		"description": "Demonstration of different philosopher states",
		"order": 1,
		"images": [
		{
			"image": "projects/philosophers/sim1.png",
			"caption": "Philosophers in eating state",
			"order": 1
		},
		{
			"image": "projects/philosophers/sim2.png",
			"caption": "Deadlock prevention mechanism",
			"order": 2
		}
		]
	}
	],
	"thumbnail": "projects/philosophers/thumbnail.png"
},
{
	"title": "FDF",
	"slug": "fdf",
	"description": "A wireframe modeling program that renders 3D landscapes from topographic maps using the MiniLibX library. Introduces computer graphics concepts and interactive 3D projections.",
	"readme": "<h1 align=\"center\">FDF</h1>\n<h3 align=\"center\">42Paris School Project</h3>\n\n... (full README content as provided) ...",
	"tech_stack": ["C", "MiniLibX", "3D Mathematics", "Bresenham's Algorithm"],
	"live_url": "",
	"code_url": "https://github.com/aouichou/fdf",
	"is_featured": true,
	"score": null,
	"features": [
	"Isometric and perspective projections",
	"Interactive 3D controls",
	"Altitude-based color gradients",
	"Multi-map support",
	"Smooth 60+ FPS rendering"
	],
	"challenges": "Implementing efficient 3D-to-2D projections while maintaining performance. Developing a robust parser for .fdf map files with various elevation formats.",
	"lessons": "Gained foundational knowledge in computer graphics, matrix transformations, and graphics library integration. Improved skills in algorithm optimization for real-time rendering.",
	"galleries": [
	{
		"name": "Rendering Examples",
		"description": "Sample wireframe outputs",
		"order": 1,
		"images": [
		{
			"image": "projects/fdf/rend1.png",
			"caption": "Isometric view of topographic map",
			"order": 1
		},
		{
			"image": "projects/fdf/rend2.png",
			"caption": "Perspective projection with coloring",
			"order": 2
		}
		]
	}
	],
	"thumbnail": "projects/fdf/thumbnail.png"
},
{
	"title": "push_swap",
	"slug": "push-swap",
	"description": "An algorithmic challenge that sorts integers using two stacks with limited operations. Demonstrates efficient algorithm design and optimization techniques.",
	"readme": "<h1 align=\"center\">push_swap</h1>\n<h3 align=\"center\">42Paris School Project</h3>\n\n... (full README content as provided) ...",
	"tech_stack": ["C", "Algorithm Design", "Linked Lists", "Complexity Analysis"],
	"live_url": "",
	"code_url": "https://github.com/aouichou/push_swap",
	"is_featured": true,
	"score": null,
	"features": [
	"Sorts 100 numbers in <700 moves",
	"Bonus checker program",
	"Doubly linked list implementation",
	"Move optimization",
	"Complex error handling"
	],
	"challenges": "Developing an algorithm that meets strict move count requirements while handling various edge cases. Optimizing the sorting process for large datasets without exceeding computational limits.",
	"lessons": "Enhanced understanding of algorithm complexity and optimization strategies. Learned to balance between different sorting approaches for varying input sizes.",
	"galleries": [
	{
		"name": "Algorithm Visualization",
		"description": "Sorting process demonstrations",
		"order": 1,
		"images": [
		{
			"image": "projects/push_swap/vis1.gif",
			"caption": "Sorting animation for 100 numbers",
			"order": 1
		}
		]
	}
	],
	"thumbnail": "projects/push_swap/thumbnail.png"
},
{
	"title": "ft_irc",
	"slug": "ft-irc",
	"description": "A custom IRC server implementation in C++98 demonstrating network programming and TCP/IP communication. Handles multiple clients with non-blocking I/O.",
	"readme": "<h1 align=\"center\">ft_irc</h1>\n<h3 align=\"center\">42Paris School Project</h3>\n\n... (full README content as provided) ...",
	"tech_stack": ["C++98", "Network Programming", "TCP/IP", "epoll"],
	"live_url": "",
	"code_url": "https://github.com/aouichou/ft_irc",
	"is_featured": true,
	"score": null,
	"features": [
	"Multi-client management",
	"IRC protocol implementation",
	"Channel operations",
	"Operator commands",
	"Comprehensive error handling"
	],
	"challenges": "Implementing the IRC protocol specification accurately while handling concurrent client connections. Developing robust network communication that handles partial data and connection drops.",
	"lessons": "Gained deep understanding of network programming, protocol implementation, and server-side resource management. Improved skills in low-level socket programming.",
	"galleries": [
	{
		"name": "Server Operations",
		"description": "IRC command demonstrations",
		"order": 1,
		"images": [
		{
			"image": "projects/ft_irc/demo1.png",
			"caption": "Channel joining and messaging",
			"order": 1
		}
		]
	}
	],
	"thumbnail": "projects/ft_irc/thumbnail.png"
},
{
	"title": "minitalk",
	"slug": "minitalk",
	"description": "A lightweight client-server communication program using UNIX signals for data transmission. Demonstrates low-level signal handling and IPC in C.",
	"readme": "<h1 align=\"center\">minitalk</h1>\n<h3 align=\"center\">42Paris School Project</h3>\n\n... (full README content as provided) ...",
	"tech_stack": ["C", "Signal Handling", "IPC", "Bit Manipulation"],
	"live_url": "",
	"code_url": "https://github.com/aouichou/minitalk",
	"is_featured": true,
	"score": null,
	"features": [
	"Signal-based communication",
	"Client-server architecture",
	"Unicode support",
	"Memory leak protection",
	"Efficient transmission"
	],
	"challenges": "Implementing reliable data transmission using only two signals. Handling bit-level manipulation and timing issues between processes.",
	"lessons": "Mastered low-level signal handling and inter-process communication. Learned advanced techniques for data encoding/decoding at the bit level.",
	"galleries": [
	{
		"name": "Communication Demo",
		"description": "Message transmission examples",
		"order": 1,
		"images": [
		{
			"image": "projects/minitalk/demo.gif",
			"caption": "Client-server message exchange",
			"order": 1
		}
		]
	}
	],
	"thumbnail": "projects/minitalk/thumbnail.png"
}
]