# ./docker-compose.yml

services:
  frontend:
    build: 
      context: ./portfolio_ui
    environment:
      - NEXT_PUBLIC_API_URL=https://aouichou.me/api
      - NEXT_PUBLIC_MEDIA_URL=https://s3.eu-west-1.amazonaws.com/bucketeer-0a244e0e-1266-4baf-88d1-99a1b4b3e579
    networks:
      - app-network
    volumes:
      - media_volume:/app/media
    depends_on: [backend]
    restart: unless-stopped

  backend:
    build: 
      context: ./portfolio_api
    expose:
      - "8080"
    volumes:
      - ./portfolio_api/media:/app/media
    env_file: portfolio_api/.env
    environment:
      - DJANGO_SETTINGS_MODULE=portfolio_api.settings
    networks:
      - app-network
    restart: unless-stopped

  reverse-proxy:
    image: nginx:alpine
    ports: ["80:80", "443:443"]
    volumes:
      - media_volume:/app/media:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      # - ./certbot/www:/var/www/certbot:ro
      # - ./certbot/conf:/etc/letsencrypt:ro
    networks:
      - app-network
    depends_on: [frontend, backend]

  # certbot:
  #   image: certbot/certbot
  #   volumes:
  #     - ./certbot/www:/var/www/certbot:rw
  #     - ./certbot/conf:/etc/letsencrypt:rw
  #   entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
  #   networks:
  #     - app-network
  #   restart: unless-stopped

  db:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file: portfolio_api/.env
    ports:
      - "5432:5432"
    networks:
      - app-network
    restart: unless-stopped

  # waf:
  #   image: owasp/modsecurity-crs:3.3
  #   volumes:
  #     - ./modsec/rules:/etc/modsecurity.d/rules

  # vault:
  #   image: vault:1.15
  #   environment:
  #     VAULT_DEV_ROOT_TOKEN_ID: "edu_vault_token"
  #   ports: ["8200:8200"]

  # elk:
  #   image: sebp/elk:8.11
  #   ports: ["5601:5601", "9200:9200", "5044:5044"]
    
  # monitoring:
  #   image: prom/prometheus
  #   ports: ["9090:9090"]
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml

networks:
  app-network:
    driver: bridge

volumes:
  media_volume:
    driver: local
  postgres_data:
    driver: local